{"ast":null,"code":"var _jsxFileName = \"/Users/razbasnet/Documents/react/GitHub/react/calculator-react-app/src/Components/Calculator.js\";\nimport { Grid } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport Calc from './Calc-comps/Calc';\nimport Screen from './Calc-comps/Screen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class componentName extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentCalculation: 0,\n      term: '',\n      history: []\n    };\n\n    this.calculate = equation => {\n      //test\n      //4-5•6÷9•9+4•6÷5•9+563•7÷6÷6++1--2+-3-+4\n\n      /*\n      Sort out the string from input to:\n      \tSplit based on the signs (+-•÷) --> makes sure that numbers in sequence like 444 is retained as a number (split and filter)\n      \tThen check for + - signs in sequence such as --+ which as works to differeciate negative, positive numbers\n      \tThe final result is an array that contains numbers (0-9) and strings (\"+-•÷\")\n      \tReverse the array so we can apply pemdas to it\n      */\n      let calc = equation.split(/(•|÷|\\+|-)/).filter((c, i) => c !== '').flatMap((c, i, arr) => {\n        if (c === '-') {\n          if (arr[i + 1] === '+') {\n            arr[i + 1] = '-';\n            return [];\n          } else if (arr[i + 1] === '-') {\n            arr[i + 1] = '+';\n            return [];\n          }\n        } else if (c === '+') {\n          if (arr[i + 1] === '-') {\n            arr[i + 1] = '-';\n            return [];\n          } else if (arr[i + 1] === '+') {\n            arr[i + 1] = '+';\n            return [];\n          }\n        }\n\n        return parseInt(c) || c;\n      }).reverse(); //Order of operations: multiplication and divison\n\n      for (let i = calc.length - 1; i >= 0; i--) {\n        if (calc[i + 1] && calc[i - 1]) {\n          if (calc[i] === '•') {\n            calc[i - 1] = calc[i + 1] * calc[i - 1];\n            calc.splice(i + 1, 1);\n            calc.splice(i, 1);\n          } else if (calc[i] === '÷') {\n            calc[i - 1] = calc[i + 1] / calc[i - 1];\n            calc.splice(i + 1, 1);\n            calc.splice(i, 1);\n          }\n        }\n      }\n\n      calc = calc.reverse(); //Order of operations: addition and subtraction\n\n      const finalCalc = calc.reduce((a, c, i, arr) => {\n        if (typeof arr[i - 1] === 'string') return a;\n\n        if (c === '-') {\n          return a - arr[i + 1];\n        } else if (c === '+') {\n          return arr[i + 1] + a;\n        } else {\n          return a + c;\n        }\n      }, 0);\n      this.setState({\n        currentCalculation: finalCalc\n      });\n    };\n\n    this.addToHistory = () => {\n      if (!isNaN(this.state.currentCalculation) && this.state.term !== '') {\n        this.setState({\n          history: [...this.state.history, {\n            equation: this.state.currentCalculation,\n            answer: this.state.term\n          }]\n        });\n      }\n    };\n\n    this.checkKeys = term => term.split('').map((c, i) => {\n      if (c === '*') return '•';\n      if (c === '/') return '÷';\n      return c;\n    }).filter((c, i) => !(i === 0 && /(•|÷|\\+)/.test(c))).join('');\n\n    this.finalCheck = term => /^([•÷0-9+-])+$/.test(term);\n\n    this.changeInput = term => {\n      let t = this.checkKeys(term);\n      if (this.finalCheck(t)) this.setState({\n        term: t\n      });\n      if (t.length < 1) this.setState({\n        term: ''\n      });\n      this.calculate(t);\n    };\n\n    this.buttonClick = button => {\n      const newTerm = this.state.term + button;\n      this.setState({\n        term: newTerm\n      });\n      this.calculate(newTerm);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      sm: \"10\",\n      md: \"8\",\n      lg: \"6\",\n      xl: \"4\",\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"flex-start\",\n      item: true,\n      className: \"main-cont\",\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Screen, {\n        term: this.state.term,\n        changeInput: this.changeInput,\n        calculate: this.calculate,\n        currentCalculation: this.state.currentCalculation,\n        buttonClick: this.buttonClick,\n        history: this.state.history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Calc, {\n        buttonClick: this.buttonClick,\n        term: this.state.term,\n        calculate: this.calculate,\n        submit: this.addToHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/razbasnet/Documents/react/GitHub/react/calculator-react-app/src/Components/Calculator.js"],"names":["Grid","React","Component","Calc","Screen","componentName","state","currentCalculation","term","history","calculate","equation","calc","split","filter","c","i","flatMap","arr","parseInt","reverse","length","splice","finalCalc","reduce","a","setState","addToHistory","isNaN","answer","checkKeys","map","test","join","finalCheck","changeInput","t","buttonClick","button","newTerm","render"],"mappings":"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","sourcesContent":["import { Grid } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport Calc from './Calc-comps/Calc';\nimport Screen from './Calc-comps/Screen';\n\nexport default class componentName extends Component {\n\tstate = { currentCalculation: 0, term: '', history: [] };\n\n\t//Calculate Input\n\tcalculate = (equation) => {\n\t\t//test\n\t\t//4-5•6÷9•9+4•6÷5•9+563•7÷6÷6++1--2+-3-+4\n\n\t\t/*\n\t\tSort out the string from input to:\n\t\t\tSplit based on the signs (+-•÷) --> makes sure that numbers in sequence like 444 is retained as a number (split and filter)\n\t\t\tThen check for + - signs in sequence such as --+ which as works to differeciate negative, positive numbers\n\t\t\tThe final result is an array that contains numbers (0-9) and strings (\"+-•÷\")\n\t\t\tReverse the array so we can apply pemdas to it\n\t*/\n\n\t\tlet calc = equation\n\t\t\t.split(/(•|÷|\\+|-)/)\n\t\t\t.filter((c, i) => c !== '')\n\t\t\t.flatMap((c, i, arr) => {\n\t\t\t\tif (c === '-') {\n\t\t\t\t\tif (arr[i + 1] === '+') {\n\t\t\t\t\t\tarr[i + 1] = '-';\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t} else if (arr[i + 1] === '-') {\n\t\t\t\t\t\tarr[i + 1] = '+';\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t} else if (c === '+') {\n\t\t\t\t\tif (arr[i + 1] === '-') {\n\t\t\t\t\t\tarr[i + 1] = '-';\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t} else if (arr[i + 1] === '+') {\n\t\t\t\t\t\tarr[i + 1] = '+';\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn parseInt(c) || c;\n\t\t\t})\n\t\t\t.reverse();\n\t\t//Order of operations: multiplication and divison\n\t\tfor (let i = calc.length - 1; i >= 0; i--) {\n\t\t\tif (calc[i + 1] && calc[i - 1]) {\n\t\t\t\tif (calc[i] === '•') {\n\t\t\t\t\tcalc[i - 1] = calc[i + 1] * calc[i - 1];\n\t\t\t\t\tcalc.splice(i + 1, 1);\n\t\t\t\t\tcalc.splice(i, 1);\n\t\t\t\t} else if (calc[i] === '÷') {\n\t\t\t\t\tcalc[i - 1] = calc[i + 1] / calc[i - 1];\n\t\t\t\t\tcalc.splice(i + 1, 1);\n\t\t\t\t\tcalc.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcalc = calc.reverse();\n\t\t//Order of operations: addition and subtraction\n\t\tconst finalCalc = calc.reduce((a, c, i, arr) => {\n\t\t\tif (typeof arr[i - 1] === 'string') return a;\n\t\t\tif (c === '-') {\n\t\t\t\treturn a - arr[i + 1];\n\t\t\t} else if (c === '+') {\n\t\t\t\treturn arr[i + 1] + a;\n\t\t\t} else {\n\t\t\t\treturn a + c;\n\t\t\t}\n\t\t}, 0);\n\t\tthis.setState({ currentCalculation: finalCalc });\n\t};\n\n\taddToHistory = () => {\n\t\tif (!isNaN(this.state.currentCalculation) && this.state.term !== '') {\n\t\t\tthis.setState({\n\t\t\t\thistory: [\n\t\t\t\t\t...this.state.history,\n\t\t\t\t\t{ equation: this.state.currentCalculation, answer: this.state.term },\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t};\n\n\t// console.log(this.state.currentCalculation, 'XD', this.state.term);\n\t//Check and Update Input\n\tcheckKeys = (term) =>\n\t\tterm\n\t\t\t.split('')\n\t\t\t.map((c, i) => {\n\t\t\t\tif (c === '*') return '•';\n\t\t\t\tif (c === '/') return '÷';\n\t\t\t\treturn c;\n\t\t\t})\n\t\t\t.filter((c, i) => !(i === 0 && /(•|÷|\\+)/.test(c)))\n\t\t\t.join('');\n\n\tfinalCheck = (term) => /^([•÷0-9+-])+$/.test(term);\n\n\tchangeInput = (term) => {\n\t\tlet t = this.checkKeys(term);\n\n\t\tif (this.finalCheck(t)) this.setState({ term: t });\n\t\tif (t.length < 1) this.setState({ term: '' });\n\t\tthis.calculate(t);\n\t};\n\tbuttonClick = (button) => {\n\t\tconst newTerm = this.state.term + button;\n\t\tthis.setState({ term: newTerm });\n\t\tthis.calculate(newTerm);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Grid\n\t\t\t\tsm=\"10\"\n\t\t\t\tmd=\"8\"\n\t\t\t\tlg=\"6\"\n\t\t\t\txl=\"4\"\n\t\t\t\tdirection=\"column\"\n\t\t\t\tjustify=\"center\"\n\t\t\t\talignItems=\"flex-start\"\n\t\t\t\titem\n\t\t\t\tclassName=\"main-cont\"\n\t\t\t\tcontainer\n\t\t\t>\n\t\t\t\t<Screen\n\t\t\t\t\tterm={this.state.term}\n\t\t\t\t\tchangeInput={this.changeInput}\n\t\t\t\t\tcalculate={this.calculate}\n\t\t\t\t\tcurrentCalculation={this.state.currentCalculation}\n\t\t\t\t\tbuttonClick={this.buttonClick}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t/>\n\t\t\t\t<Calc\n\t\t\t\t\tbuttonClick={this.buttonClick}\n\t\t\t\t\tterm={this.state.term}\n\t\t\t\t\tcalculate={this.calculate}\n\t\t\t\t\tsubmit={this.addToHistory}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}